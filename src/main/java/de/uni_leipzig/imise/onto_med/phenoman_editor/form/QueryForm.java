package de.uni_leipzig.imise.onto_med.phenoman_editor.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.uni_leipzig.imise.onto_med.phenoman_editor.util.TreeTransferHandler;
import care.smith.phep.phenoman.core.model.phenotype.top_level.AbstractPhenotype;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.*;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.Arrays;

public class QueryForm extends PhenotypeTab {
    private JPanel                   contentPane;
    private PhenotypeTreeForm        tree;
    private JButton                  sendQueryButton;
    private JProgressBar             queryProgressBar;
    private JList<AbstractPhenotype> queryList;

    public QueryForm() {
        super();
        $$$setupUI$$$();
    }

    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "reload":
                reloadEntityTree();
            default:
        }
    }

    private void createUIComponents() {
        tree = new PhenotypeTreeForm(this, new TreeTransferHandler());
        queryList = new JList<>();
        queryList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        queryList.setTransferHandler(new TransferHandler("entity"));
        queryList.setDropTarget(new DropTarget(queryList, TransferHandler.COPY, new DropTargetAdapter() {
            private void print(Transferable tr) {
                try {
                    Object node = tr.getTransferData(TreeTransferHandler.FLAVOR);
                    System.out.println(((DefaultMutableTreeNode) node).getUserObject());
                } catch (UnsupportedFlavorException | IOException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                if (dtde.isDataFlavorSupported(TreeTransferHandler.FLAVOR))
                    print(dtde.getTransferable());
            }
        }, true, null));
    }

    private void reloadEntityTree() {
        if (mapper == null || !mapper.hasModel()) return;
        tree.fillTree(mapper.getModel().getReader().getEntityTreeWithPhenotypes(false));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        contentPane.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        splitPane1.setLeftComponent(tree.$$$getRootComponent$$$());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Drag and drop phenotypes from the tree on the left side into this field.");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(true);
        panel2.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        queryList.setDragEnabled(false);
        scrollPane1.setViewportView(queryList);
        sendQueryButton = new JButton();
        sendQueryButton.setText("Send Query");
        panel1.add(sendQueryButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        queryProgressBar = new JProgressBar();
        panel1.add(queryProgressBar, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
